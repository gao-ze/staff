#include "staff.h"

#define BL 10
#define CONNECT_NUM 20
#define SQL_CMD 128

int main(int argc, const char *argv[])
{
	if(argc < 3){
		printf("Usage:%s IP port\n",argv[0]);
		exit(-1);
	}

	sqlite3 *db;
	if(sqlite3_open("staff.db",&db) != 0){
		fprintf(stderr,"sqlite3 open failed %s\n",sqlite3_errmsg(db));
		exit(-1);
	}
	printf("sqlite3 open ok\n");

	char *errmsg = NULL;

	if(sqlite3_exec(db,"create table info(type int,id unsigned int primary key,name char,passwd char,addr char,phone unsigned long,salary float)",\
				NULL,NULL,&errmsg) != 0)
	{
		fprintf(stderr,"create table failed %s\n",errmsg);
		exit(-1);
	}
	printf("table create ok\n");

	if(sqlite3_exec(db,"insert into info(type,id,name,passwd) values(1,10001,\"admin\",123456)",\
				NULL,NULL,&errmsg) != 0)
	{
		fprintf(stderr,"insert failed %s\n",errmsg);
		exit(-1);
	}
	printf("insert ok\n");


	int sockfd,acceptfd;

	sockfd = socket(AF_INET,SOCK_STREAM,0);
	if(sockfd < 0){
		perror("socket failed:");
		exit(-1);
	}

	struct sockaddr_in serveraddr,clientaddr;

	serveraddr.sin_family = AF_INET;
	serveraddr.sin_port = htons(atoi(argv[2]));
	serveraddr.sin_addr.s_addr = inet_addr(argv[1]);
	socklen_t addrlen = sizeof(serveraddr);
	socklen_t clientlen = sizeof(clientaddr);

	if(bind(sockfd,(struct sockaddr *)&serveraddr,addrlen) < 0){
		perror("bind failed");
		exit(-1);
	}

	if(listen(sockfd,BL) < 0){
		perror("listen failed");
		exit(-1);
	}

	int epfd, epct, i;
	struct epoll_event event;
	struct epoll_event events[CONNECT_NUM];
	epfd = epoll_create(1);

	event.data.fd = sockfd;
	event.events = EPOLLIN | EPOLLET;
	epoll_ctl(epfd,EPOLL_CTL_ADD,sockfd,&event);

	while(1)
	{
		epct = epoll_wait(epfd,events,CONNECT_NUM,-1);
		for(i = 0;i < epct;i++){
			if(events[i].data.fd == sockfd){
				acceptfd = accept(events[i].data.fd,(struct sockaddr *)&clientaddr,&clientlen);
				if(acceptfd < 0){
					perror("accept failed");
					exit(-1);
				}
				event.data.fd = acceptfd;
				event.events = EPOLLIN | EPOLLET;
				epoll_ctl(epfd,EPOLL_CTL_ADD,acceptfd,&event);
			}
			else{

				int recvbytes;
				recvbytes = recv(acceptfd,&user,sizeof(user),0);
				if(recvbytes < 0){
					perror("revc failed");
					exit("-1");
				}
				else if(recvbytes == 0){
					printf("connect disconnected\n");
					close(events[i].data.fd);
					epoll_ctl(epfd,EPOLL_CTL_DEL,events[i].data.fd,&event);
					continue;
				}
				//以下为接收成功情况
				sqlite3_operation();
			}
		}
	}
	close(sockfd);
	close(acceptfd);

	return 0;
}
